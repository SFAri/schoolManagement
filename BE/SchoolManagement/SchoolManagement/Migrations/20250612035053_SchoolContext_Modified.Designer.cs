// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolManagement.Models;

#nullable disable

namespace SchoolManagement.Migrations
{
    [DbContext(typeof(SchoolContext))]
    [Migration("20250612035053_SchoolContext_Modified")]
    partial class SchoolContext_Modified
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4e0b76bd-4493-4ba4-ae61-47a8a608542b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "0851e4a9-c40e-4a53-b8b0-596550da27c8",
                            Name = "Lecturer",
                            NormalizedName = "LECTURER"
                        },
                        new
                        {
                            Id = "cbbb038c-ede0-470f-a651-02671f4f0c98",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "13f6374a-dfee-4c77-9bfa-918edfb16a3c",
                            RoleId = "4e0b76bd-4493-4ba4-ae61-47a8a608542b"
                        },
                        new
                        {
                            UserId = "74e9a246-5f13-491e-a0d2-d5fbaddf91c8",
                            RoleId = "0851e4a9-c40e-4a53-b8b0-596550da27c8"
                        },
                        new
                        {
                            UserId = "bcfa7ac0-d384-45fe-9d2f-18761f1b012d",
                            RoleId = "cbbb038c-ede0-470f-a651-02671f4f0c98"
                        },
                        new
                        {
                            UserId = "a89c11b0-2099-43f3-8060-74237b6ed5cb",
                            RoleId = "cbbb038c-ede0-470f-a651-02671f4f0c98"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolManagement.Models.AcademicYear", b =>
                {
                    b.Property<int>("AcademicYearId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AcademicYearId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AcademicYearId");

                    b.ToTable("AcademicYears");

                    b.HasData(
                        new
                        {
                            AcademicYearId = 1,
                            CreatedAt = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsLocked = true,
                            Year = "2023-2024"
                        },
                        new
                        {
                            AcademicYearId = 2,
                            CreatedAt = new DateTime(2025, 6, 12, 10, 50, 53, 631, DateTimeKind.Local).AddTicks(8700),
                            IsLocked = false,
                            Year = "2024-2025"
                        });
                });

            modelBuilder.Entity("SchoolManagement.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"), 1L, 1);

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LecturerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseId");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("LecturerId");

                    b.HasIndex("UserId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            AcademicYearId = 1,
                            CourseName = "React",
                            EndDate = new DateTime(2024, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LecturerId = "74e9a246-5f13-491e-a0d2-d5fbaddf91c8",
                            StartDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            CourseId = 2,
                            AcademicYearId = 1,
                            CourseName = "Flutter",
                            EndDate = new DateTime(2024, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LecturerId = "74e9a246-5f13-491e-a0d2-d5fbaddf91c8",
                            StartDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SchoolManagement.Models.Enrollment", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeJoined")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "ShiftId");

                    b.HasIndex("ShiftId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            UserId = "bcfa7ac0-d384-45fe-9d2f-18761f1b012d",
                            ShiftId = 1,
                            TimeJoined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = "bcfa7ac0-d384-45fe-9d2f-18761f1b012d",
                            ShiftId = 2,
                            TimeJoined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = "a89c11b0-2099-43f3-8060-74237b6ed5cb",
                            ShiftId = 1,
                            TimeJoined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = "a89c11b0-2099-43f3-8060-74237b6ed5cb",
                            ShiftId = 2,
                            TimeJoined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = "bcfa7ac0-d384-45fe-9d2f-18761f1b012d",
                            ShiftId = 3,
                            TimeJoined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = "bcfa7ac0-d384-45fe-9d2f-18761f1b012d",
                            ShiftId = 4,
                            TimeJoined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = "a89c11b0-2099-43f3-8060-74237b6ed5cb",
                            ShiftId = 3,
                            TimeJoined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            UserId = "a89c11b0-2099-43f3-8060-74237b6ed5cb",
                            ShiftId = 4,
                            TimeJoined = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SchoolManagement.Models.Score", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<float>("AverageScore")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Final")
                        .HasColumnType("real");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<float>("Midterm")
                        .HasColumnType("real");

                    b.Property<float>("Process1")
                        .HasColumnType("real");

                    b.Property<float>("Process2")
                        .HasColumnType("real");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Scores");

                    b.HasData(
                        new
                        {
                            UserId = "bcfa7ac0-d384-45fe-9d2f-18761f1b012d",
                            CourseId = 1,
                            AverageScore = 8.65f,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Final = 8f,
                            Grade = 1,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Midterm = 10f,
                            Process1 = 8.5f,
                            Process2 = 9f
                        },
                        new
                        {
                            UserId = "a89c11b0-2099-43f3-8060-74237b6ed5cb",
                            CourseId = 1,
                            AverageScore = 7.4f,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Final = 7f,
                            Grade = 2,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Midterm = 10f,
                            Process1 = 7f,
                            Process2 = 6f
                        },
                        new
                        {
                            UserId = "bcfa7ac0-d384-45fe-9d2f-18761f1b012d",
                            CourseId = 2,
                            AverageScore = 8.65f,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Final = 8f,
                            Grade = 1,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Midterm = 10f,
                            Process1 = 8.5f,
                            Process2 = 9f
                        },
                        new
                        {
                            UserId = "a89c11b0-2099-43f3-8060-74237b6ed5cb",
                            CourseId = 2,
                            AverageScore = 7.4f,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Final = 8f,
                            Grade = 2,
                            LastUpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Midterm = 7f,
                            Process1 = 6f,
                            Process2 = 7f
                        });
                });

            modelBuilder.Entity("SchoolManagement.Models.Shift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShiftId"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("MaxQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ShiftCode")
                        .HasColumnType("int");

                    b.Property<int>("WeekDay")
                        .HasColumnType("int");

                    b.HasKey("ShiftId");

                    b.HasIndex("CourseId");

                    b.ToTable("Shifts");

                    b.HasData(
                        new
                        {
                            ShiftId = 1,
                            CourseId = 1,
                            MaxQuantity = 30,
                            ShiftCode = 0,
                            WeekDay = 0
                        },
                        new
                        {
                            ShiftId = 2,
                            CourseId = 1,
                            MaxQuantity = 30,
                            ShiftCode = 1,
                            WeekDay = 3
                        },
                        new
                        {
                            ShiftId = 3,
                            CourseId = 2,
                            MaxQuantity = 30,
                            ShiftCode = 0,
                            WeekDay = 2
                        },
                        new
                        {
                            ShiftId = 4,
                            CourseId = 2,
                            MaxQuantity = 30,
                            ShiftCode = 1,
                            WeekDay = 4
                        });
                });

            modelBuilder.Entity("SchoolManagement.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "13f6374a-dfee-4c77-9bfa-918edfb16a3c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c2c726e-4c2f-4153-a3ab-eac262e5acd5",
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Katz",
                            Gender = 0,
                            LastName = "Ariz",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGOkUv3mXM9YrTSH1XlWZveLUJlpWueXo4rC+wYCURZ4ZrTs+3vyiq+s+8Oo6vwqA==",
                            PhoneNumberConfirmed = false,
                            RoleId = 0,
                            SecurityStamp = "673fe6ec-ceed-4038-a309-7b9987cfb197",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = "74e9a246-5f13-491e-a0d2-d5fbaddf91c8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d9842dc-3c34-4a4c-831d-e387311820fa",
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lecturer1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Liam",
                            Gender = 1,
                            LastName = "Nguyen",
                            LockoutEnabled = false,
                            NormalizedEmail = "LECTURER1@GMAIL.COM",
                            NormalizedUserName = "LECTURER1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHIgbH72vgIa3xJkYDj/aD+qlw/H7l13KfuSpG71yE2+KhQdVkWYqXLjOVJJlV5ZKg==",
                            PhoneNumberConfirmed = false,
                            RoleId = 1,
                            SecurityStamp = "64950a27-52d2-4e6d-ab76-48d33b795971",
                            TwoFactorEnabled = false,
                            UserName = "lecturer1@gmail.com"
                        },
                        new
                        {
                            Id = "bcfa7ac0-d384-45fe-9d2f-18761f1b012d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1281e76d-1544-4483-b6c1-a0d0dae51e64",
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Anna",
                            Gender = 0,
                            LastName = "Le",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT1@GMAIL.COM",
                            NormalizedUserName = "STUDENT1@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMHPxqbyQ1HTM0KmCxbofxFkbgNJBihDKIuBpIAJXri8Xzi3YfvUWfOYU/Jq7QK8lA==",
                            PhoneNumberConfirmed = false,
                            RoleId = 2,
                            SecurityStamp = "e93e4a4d-f7e6-436a-be32-d7e017effb20",
                            TwoFactorEnabled = false,
                            UserName = "student1@gmail.com"
                        },
                        new
                        {
                            Id = "a89c11b0-2099-43f3-8060-74237b6ed5cb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05bcaf33-539a-455b-92c6-51c9093ea159",
                            DOB = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "student2@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Minh",
                            Gender = 1,
                            LastName = "Tran",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT2@GMAIL.COM",
                            NormalizedUserName = "STUDENT2@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMPfiUzVaoe8zPwwX9pF6WIos1EIOyb5EToHF1T60wC7XH5UBJS3tsCSGGMXuMYswQ==",
                            PhoneNumberConfirmed = false,
                            RoleId = 2,
                            SecurityStamp = "b4244218-db73-4f9d-b719-5a03a1d11c1e",
                            TwoFactorEnabled = false,
                            UserName = "student2@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SchoolManagement.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SchoolManagement.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SchoolManagement.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolManagement.Models.Course", b =>
                {
                    b.HasOne("SchoolManagement.Models.AcademicYear", "AcademicYear")
                        .WithMany("Courses")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Models.User", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Models.User", null)
                        .WithMany("Courses")
                        .HasForeignKey("UserId");

                    b.Navigation("AcademicYear");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("SchoolManagement.Models.Enrollment", b =>
                {
                    b.HasOne("SchoolManagement.Models.Shift", "Shift")
                        .WithMany("Enrollments")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Models.User", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shift");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolManagement.Models.Score", b =>
                {
                    b.HasOne("SchoolManagement.Models.Course", "Course")
                        .WithMany("Scores")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolManagement.Models.User", "User")
                        .WithMany("Scores")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolManagement.Models.Shift", b =>
                {
                    b.HasOne("SchoolManagement.Models.Course", "Course")
                        .WithMany("Shifts")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("SchoolManagement.Models.AcademicYear", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("SchoolManagement.Models.Course", b =>
                {
                    b.Navigation("Scores");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("SchoolManagement.Models.Shift", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("SchoolManagement.Models.User", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Enrollments");

                    b.Navigation("Scores");
                });
#pragma warning restore 612, 618
        }
    }
}
